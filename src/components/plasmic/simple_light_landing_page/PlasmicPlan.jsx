// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wx6aoo7FZEXNn8vLYsSQDm
// Component: ZUD5-L-XqHsPV0
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import BaseCard from "../../BaseCard" // plasmic-import: _bN4lfvrgdh9vg/component
import Bullet from "../../Bullet" // plasmic-import: _f77SlnS2kNwy2/component
import Button from "../../Button" // plasmic-import: jqiB88P53Q6rHE/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_simple_light_landing_page.module.css" // plasmic-import: wx6aoo7FZEXNn8vLYsSQDm/projectcss
import * as sty from "./PlasmicPlan.module.css" // plasmic-import: ZUD5-L-XqHsPV0/css

export const PlasmicPlan__VariantProps = new Array()

export const PlasmicPlan__ArgProps = new Array(
  "price",
  "name",
  "description",
  "children"
)

function PlasmicPlan__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const $props = props.args
  return (
    <BaseCard
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zuy9V)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ksne1)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Basic",
            value: args.name,
            className: classNames(sty.slotTargetName),
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5N4Zq
                )}
              >
                {"$10"}
              </div>
            ),

            value: args.price,
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yxfGl)}
              >
                <Bullet
                  className={classNames("__wab_instance", sty.bullet__yHop)}
                />

                <Bullet
                  className={classNames("__wab_instance", sty.bullet__w51Xv)}
                />

                <Bullet
                  className={classNames("__wab_instance", sty.bullet__p3HYv)}
                />
              </p.Stack>
            ),

            value: args.description,
          })}

          <div className={classNames(projectcss.all, sty.freeBox__ppPWg)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__h6Qe)}
                  color={"outlineBlue"}
                >
                  {"Get started"}
                </Button>
              ),

              value: args.children,
            })}
          </div>
        </p.Stack>
      </div>
    </BaseCard>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPlan__ArgProps,
      internalVariantPropNames: PlasmicPlan__VariantProps,
    })

    return PlasmicPlan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPlan"
  } else {
    func.displayName = `PlasmicPlan.${nodeName}`
  }
  return func
}

export const PlasmicPlan = Object.assign(
  // Top-level PlasmicPlan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPlan
    internalVariantProps: PlasmicPlan__VariantProps,
    internalArgProps: PlasmicPlan__ArgProps,
  }
)

export default PlasmicPlan
/* prettier-ignore-end */
